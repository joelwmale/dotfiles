# Use vs instead of code
vs () { VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $* ;}

composer-link() {
    # Check if the directory is provided and exists
    if [[ -z "$1" || ! -d "$1" ]]; then
        echo "Usage: composer-link <path-to-package-directory>"
        return 1
    fi

    # Define the path to the package's composer.json file
    PACKAGE_COMPOSER_JSON="$1/composer.json"

    # Check if composer.json exists in the given directory
    if [[ ! -f "$PACKAGE_COMPOSER_JSON" ]]; then
        echo "Error: composer.json not found in the specified directory."
        return 1
    fi

    # Extract the 'name' field from the package's composer.json
    PACKAGE_NAME=$(jq -r '.name' "$PACKAGE_COMPOSER_JSON" 2>/dev/null)

    # Verify the name was successfully extracted
    if [[ -z "$PACKAGE_NAME" || "$PACKAGE_NAME" == "null" ]]; then
        echo "Error: Unable to find a valid 'name' in $PACKAGE_COMPOSER_JSON."
        return 1
    fi

    # Add the repository to the current project's composer.json
    composer config repositories.local '{"type": "path", "url": "'"$1"'"}' --file composer.json

    # Run composer require using the extracted package name
    composer require "$PACKAGE_NAME":@dev

    echo "Successfully linked and required package: $PACKAGE_NAME"
}
function tc() {
   if [ -f app/Console/Commands/TestCommand.php ]; then
      pa test:command
   else
      pa make:command TestCommand
      sed -i 's/command:name/test:command/' app/Console/Commands/TestCommand.php
   fi
}

# Create a new directory and enter it
function mkd() {
   mkdir -p "$@" && cd "$@"
}

function weather() {
   ocal city="${1:-Brisbane}"
   curl http://wttr.in/${city// /+}\?F
}

function commit() {
  commitMessage="$*"

  git add .

  if [ "$commitMessage" = "" ]; then
     aicommits
     return
  fi
    
  eval "git commit -a -m '${commitMessage}'"
}

function db () {
   [ ! -f .env ] && { echo "No .env file found."; exit 1; }

   DB_CONNECTION=$(grep DB_CONNECTION .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_HOST=$(grep DB_HOST .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_PORT=$(grep DB_PORT .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_DATABASE=$(grep DB_DATABASE .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_USERNAME=$(grep DB_USERNAME .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_PASSWORD=$(grep DB_PASSWORD .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)

   DB_URL="${DB_CONNECTION}://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}"

   echo "Opening ${DB_URL}"
   open $DB_URL
}

function scheduler () {
    while :; do
        php artisan schedule:run
	echo "Sleeping 60 seconds..."
        sleep 60
    done
}

function silent() {
   "$@" >& /dev/null
}
